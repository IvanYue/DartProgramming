/**
 * 函数体：函数在执行时需要计算的代码
 * 跟在函数前面之后
 * 1. {}
 * 2. =>
 */


/// 构造函数：用来创建类的实例的特殊函数。
/// 1.工厂构造函数：具备特殊功能的普通函数
/// 2.生产构造函数
/// 两种函数的区别：在于返回一个新的实例或者抛出一个异常
/// 1.就算没有显示的return，生产构造函数也不会返回null
/// 2.生产构造函数不能返回任何表达式，它只可能包含一个没有关联表达式的return语句


/**
 * 函数声明：函数名+参数+函数体
 * 
 * 抽象方法：有函数签名，但没有函数体。从技术上说并不是函数声明。
 * 把他们作为声明只是为了辅助静态检察器
 * 
 * 局部函数：定义在其他函数内部的函数
 * 
 */


//计算第n个斐波那契数
// lastTwo() 只是 fib() 的一个实现细节，所以嵌入到fib()中，以避免引入一个额外的函数名，而使外层命名空间受到污染。
fib(n){
  lastTwo(n){
    if(n<1){return [0,1];}
    else{
      var p = lastTwo(n-1);
      return [p[1],p[0]+p[1]];
    }
    return lastTwo(n)[1];
  }
}