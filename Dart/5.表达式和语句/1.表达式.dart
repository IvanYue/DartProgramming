/**
 * 字面量：
 * 整数 int：底层实现类的唯一方法只有反射。不能继承也不能用另一个类来实现int
 * 
 * 浮点数（双精度）：64-bit 浮点数 double
 * 1.-0.0和0.0相等但不相同
 * 2.NaN(非数字)与自身不相同但相等
 * 不能继承也不能用另一个类来实现double
 * 
 * 布尔值：true/false， bool类的成员。
 * Dart不支持内置的强制转换。
 * ture 是 Dart 中的唯一真值。
 * 不能继承也不能用另一个类来实现bool类
 * 
 * 
 * 字符串：单引号/双引号。多行可以使用三个单引号/三个双引号
 * /n 换行，/r 回车，/f换页，/b退格，/t水平制表，/v垂直制表，
 * Dart字符串也支持字符串插值。 $ 符号
 * 不能继承也不能用另一个类来实现String类
 * Dart 使用 utf-16的编码单元来表示字符串
 */

/**
 * Symbol 用来表示程序中声明的名称。Symbol 使用 井号符# 开头，后面跟着一个或多个用点分割的标识符或者运算符。
 * 非用户自定义的运算符包括：
 * 1.赋值运算符，包括基本赋值运算符以及所有符合运算符
 * 2.在成员选择时使用的点运算符，以及在级联操作中使用的双点运算符
 * 3.不相等运算符，与相等运算符
 * 4.逻辑非运算符
 * 5.后置运算符，自加与自减
 * 6.布尔逻辑运算符
 */
// #MyClass #i #[] #com.evil_empire.forThenWin


/**
 * 列表字面量：写成封闭在方括号内的一系列用逗号分隔的表达式
 * 列表字面量都实现了List类的接口
 * 类表是泛型类
 * 通过给字面量添加 const 修饰符，列表字面量能够变成编译时常量。
 * const 的使用与类型参数的使用完全无关。
 */

/**
 * Map字面量：封闭在花括号内的一些列用逗号分隔的键值。
 * {键:值}
 * 所有Map字面量都实现了Map类的接口
 * Map是有两个类型参数的泛型类：第一个是键的类型，第二个是值的类型。
 * 通过给字面量添加 const 修饰符，Map字面量能够变成编译时常量。
 * const 的使用与类型参数的使用完全无关。
 */

/**
 * 函数
 * 因为没有函数字面量返回类型的语法，所以函数字面量的返回类型始终是dynamic
 * 函数字面量的参数类型的确定方式与其他函数时一样的，如果参数声明了类型，就是使用该类型，否则就是dynamic。
 * 根据参数的类型，以及他们是否必填和必选，是位置型还是命名型，可以确定函数字面量的签名。
 */